generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique
  password  String
  karma     Int      @default(0)
  posts     Post[]
  comments  Comment[]
  votes     Vote[]
  createdSubreddits Subreddit[] @relation("UserCreatedSubreddits")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subreddit {
  id              String   @id @default(uuid())
  name            String   @unique
  description     String
  creator         User     @relation("UserCreatedSubreddits", fields: [creatorId], references: [id])
  creatorId       String
  posts           Post[]
  subscriberCount Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Post {
  id          String    @id @default(uuid())
  title       String
  content     String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  subreddit   Subreddit @relation(fields: [subredditId], references: [id])
  subredditId String
  comments    Comment[]
  votes       Vote[]
  upvotes     Int       @default(0)
  downvotes   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id              String    @id @default(uuid())
  content         String
  author          User      @relation(fields: [authorId], references: [id])
  authorId        String
  post            Post      @relation(fields: [postId], references: [id])
  postId          String
  parentComment   Comment?  @relation("CommentToComment", fields: [parentCommentId], references: [id])
  parentCommentId String?
  replies         Comment[] @relation("CommentToComment")
  votes           Vote[]
  upvotes         Int       @default(0)
  downvotes       Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Vote {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  post       Post?    @relation(fields: [postId], references: [id])
  postId     String?
  comment    Comment? @relation(fields: [commentId], references: [id])
  commentId  String?
  targetType String
  voteType   String
  createdAt  DateTime @default(now())
} 